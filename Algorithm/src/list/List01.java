package list;

public class List01 {
	
	/*
	 * 리스트 중복을 허용하며 순서가 있는 연속된 데이터를 표현하는 자료구조. 배열과 달리 사용하는 중에 크기가 자동으로 조절된다.
	 * 
	 * 자바가 제공하는 대표적인 리스트 
	 * Vector 
	 */
	
	// index 기반
	
	/* 
	 * ArryList 
	 * List는 기본적으로 10의 크기만큼 가지고있다. 
	 * 그래서 시간복잡도가 O(1)인것인데 우리가 사용하면서
	 * 10의 넘어가게 되면 새로운 배열을 만들고 기존에 있는 배열을 복사함으로 시간 복잡도는 O(n)이 되는 것 이다.
	 * 
	 * 
	 * 삭제 할 때는 기존의 List랑 다르게 바로 List을 복사하는것이 아니고 어느정도의 임계치가 있다. 
	 * 빈 공간인상태로 있다가 어느정도 임계치가 지나면 기존보다 작은 List을 만들어서 복사를 한다.
	 * 그럼으로 최악의 경우에는 O(N)이 걸릴 수 있다.
	 * 
	 * 조회 할 때는 우리가 원하는 데이터를 get을 이용해서 받는것은 O(1)로 접근을 한다.
	 * 하지만 contains을 사용할 때는 값이 들어있는지 봐야한다 위치를 보는것이 아닌
	 * 그래서 전부다 조회를 해야한다. 그래서 contains을 이용하여 조회을 할 때는 O(N)이다.
	 */
	
	/* LinkedList => 연결되어있는 node의 리스트이다.
	 * 
	 * 조회 O(N)
	 * 추가 및 삭제 O(1)
	 * 
	 * Ex) ㅁ->ㅁ->ㅁ->ㅁ
	 * LinkedList는 연결되어있는 모든 node들을 지나서 가야 함으로 O(N)이다.
	 * Ex) 100번째에 있다면 100번을 반복하여 가지고 온다.
	 * 
	 * 
	 * 추가을 할때는 링크만 추가하면 된다. 그럼으로 O(1)가 걸리고
	 * 하지만 중간에 추가를 하고 싶으면 조회처럼 그 전까지의 모든 node을 넘어가야 함으로 O(N)이 걸린다.
	 * 
	 * 삭제도 삭제하 싶은 node을 끊고 선만 다시 연결하면 됨으로 O(1)이걸린다.
	 * 하지만 위 삭제의 내용은 이론상의 이야기 이고
	 * 우리가 평소에 배열을 삭제 할때 사용하는 remove()을 사용할때는 조회처럼 모든 node을 순회하면서 돌아야한다. 그럼으로 O(N)이 걸리는 것이다.
	 */ 
	
	
	/* ArrayList 
	 * 추가 및 삭제 O(1) 하지만 최악의 경우에는 O(N) 
	 * 조회 O(N)
	 * 
	 * LinkedList 
	 * 추가 및 삭제 O(1) 
	 * 조회 O(N)
	 */
	
	/*
	 * 문제1
	 *  LinkedList 뒤집기 단일 연결 리스트를 뒤집는 함수를 구현하라
	 */

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
